{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for Skybase \u00b6 Welcome to Skybase's docs! You will find information about how you can get started with Skybase, installation options, configuration and clients. Users \u00b6 We have an easy-to-follow guide for Getting Started . Once you've got everything up and running, you can take a look at the available actions here and configuration files . Coming from TerrabaseDB? Read this . Developers \u00b6 You can find information on how to build your own clients here . The primary idea is to implement the Terrapipe Protocol. Contributing \u00b6 If you find any typos, mistakes or any other scope of improvement - please don't hesitate to bring it up here . Thank you \u2764\ufe0f! License \u00b6 The documentation is licensed under the CC-BY-SA-4.0 License","title":"Introduction"},{"location":"#documentation-for-skybase","text":"Welcome to Skybase's docs! You will find information about how you can get started with Skybase, installation options, configuration and clients.","title":"Documentation for Skybase"},{"location":"#users","text":"We have an easy-to-follow guide for Getting Started . Once you've got everything up and running, you can take a look at the available actions here and configuration files . Coming from TerrabaseDB? Read this .","title":"Users"},{"location":"#developers","text":"You can find information on how to build your own clients here . The primary idea is to implement the Terrapipe Protocol.","title":"Developers"},{"location":"#contributing","text":"If you find any typos, mistakes or any other scope of improvement - please don't hesitate to bring it up here . Thank you \u2764\ufe0f!","title":"Contributing"},{"location":"#license","text":"The documentation is licensed under the CC-BY-SA-4.0 License","title":"License"},{"location":"01-Getting-Started/","text":"Getting Started \u00b6 Getting started with Skybase is easy \ud83d\ude0a (and fun!). You can get started with native binaries (recommended) or by using the docker image . Get started with bundles \u00b6 Step 1: Download a bundle \u00b6 Head over to the releases page and download the latest version for your platform. Step 2: Make the files runnable \u00b6 Unzip the zip file that you just downloaded. If you're on a *nix system, run chmod +x sdb skysh to make the files executable. If you're on Windows, right-click the files and then check the UNBLOCK checkbox and click on the APPLY button. Step 3: Start the database server \u00b6 In the directory where you extracted the files, run ./sdb on *nix systems or simply sdb on Windows systems. That's all there is to starting the database server! Step 4: Run the shell skysh \u00b6 skysh is the shell that is shipped with the bundle. Run it, just like you did with the database server. Now enter commands in the shell, and have fun! First run HEYA to check if everything is fine - the server should reply with HEY! . See all the available actions here You're done with setting up sdb \ud83c\udf89! Get started with Docker \u00b6 First of all, you need to have Docker installed and available on your PATH ; you can read the official guide here . Once you've got Docker up and running, follow the steps! Step 0: Create a container \u00b6 Open up a terminal and run: docker create skybasedb/sdb --name skyvm NOTE: You may need superuser priveleges At the same time, you'll need to set up the bundle by following Step 1 and Step 2 from the previous section. Step 1: Start the container \u00b6 Now run: docker start skyvm NOTE: You may need superuser priveleges Step 2: Find the IP address of the container \u00b6 In order to connect to the container (which, to skysh is nothing but a remote server), you'll have to run: docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' skyvm NOTE: You may need superuser priveleges And you'll get a result like: 172.17.0.1 Step 3: Start the command line client \u00b6 Open up a terminal in the directory where you downloaded the command line client and run: skysh -h 172.17.0.1 And you're done!","title":"Getting Started"},{"location":"01-Getting-Started/#getting-started","text":"Getting started with Skybase is easy \ud83d\ude0a (and fun!). You can get started with native binaries (recommended) or by using the docker image .","title":"Getting Started"},{"location":"01-Getting-Started/#get-started-with-bundles","text":"","title":"Get started with bundles"},{"location":"01-Getting-Started/#step-1-download-a-bundle","text":"Head over to the releases page and download the latest version for your platform.","title":"Step 1: Download a bundle"},{"location":"01-Getting-Started/#step-2-make-the-files-runnable","text":"Unzip the zip file that you just downloaded. If you're on a *nix system, run chmod +x sdb skysh to make the files executable. If you're on Windows, right-click the files and then check the UNBLOCK checkbox and click on the APPLY button.","title":"Step 2: Make the files runnable"},{"location":"01-Getting-Started/#step-3-start-the-database-server","text":"In the directory where you extracted the files, run ./sdb on *nix systems or simply sdb on Windows systems. That's all there is to starting the database server!","title":"Step 3: Start the database server"},{"location":"01-Getting-Started/#step-4-run-the-shell-skysh","text":"skysh is the shell that is shipped with the bundle. Run it, just like you did with the database server. Now enter commands in the shell, and have fun! First run HEYA to check if everything is fine - the server should reply with HEY! . See all the available actions here You're done with setting up sdb \ud83c\udf89!","title":"Step 4: Run the shell skysh"},{"location":"01-Getting-Started/#get-started-with-docker","text":"First of all, you need to have Docker installed and available on your PATH ; you can read the official guide here . Once you've got Docker up and running, follow the steps!","title":"Get started with Docker"},{"location":"01-Getting-Started/#step-0-create-a-container","text":"Open up a terminal and run: docker create skybasedb/sdb --name skyvm NOTE: You may need superuser priveleges At the same time, you'll need to set up the bundle by following Step 1 and Step 2 from the previous section.","title":"Step 0: Create a container"},{"location":"01-Getting-Started/#step-1-start-the-container","text":"Now run: docker start skyvm NOTE: You may need superuser priveleges","title":"Step 1: Start the container"},{"location":"01-Getting-Started/#step-2-find-the-ip-address-of-the-container","text":"In order to connect to the container (which, to skysh is nothing but a remote server), you'll have to run: docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' skyvm NOTE: You may need superuser priveleges And you'll get a result like: 172.17.0.1","title":"Step 2: Find the IP address of the container"},{"location":"01-Getting-Started/#step-3-start-the-command-line-client","text":"Open up a terminal in the directory where you downloaded the command line client and run: skysh -h 172.17.0.1 And you're done!","title":"Step 3: Start the command line client"},{"location":"02-Actions/","text":"Actions \u00b6 Skybase currently supports the following actions: DBSIZE DEL EXISTS FLUSHDB GET KEYLEN MGET MKSNAP MSET MUPDATE SDEL SET SSET SUPDATE UPDATE USET","title":"Actions"},{"location":"02-Actions/#actions","text":"Skybase currently supports the following actions: DBSIZE DEL EXISTS FLUSHDB GET KEYLEN MGET MKSNAP MSET MUPDATE SDEL SET SSET SUPDATE UPDATE USET","title":"Actions"},{"location":"03-command-line-config/","text":"Command line configuration \u00b6 With Skybase v0.5.0, you can use command line arguments alone for configuration. For the easiest setup, use Skybase's Setup Web App . Every binary ( sdb , skysh and sky-bench ) that you get with a bundle have extremely helpful help menus: sdb --help : Brings up the help menu for sdb skysh --help : Brings up the help menu for skysh sky-bench --help : Brings up the help menu for sky-bench","title":"Command line configuration"},{"location":"03-command-line-config/#command-line-configuration","text":"With Skybase v0.5.0, you can use command line arguments alone for configuration. For the easiest setup, use Skybase's Setup Web App . Every binary ( sdb , skysh and sky-bench ) that you get with a bundle have extremely helpful help menus: sdb --help : Brings up the help menu for sdb skysh --help : Brings up the help menu for skysh sky-bench --help : Brings up the help menu for sky-bench","title":"Command line configuration"},{"location":"04-Configuration/","text":"Configuration Files \u00b6 Since v0.4.1, Skybase supports custom configuration files to let users customize the functioning of Skybase. Arguably, Skybase has one of the simplest configuration files around. With v0.5.0, Skybase allows configuration via command line arguments . An example configuration \u00b6 A configuration file is a TOML file, which looks like: [server] host = \"127.0.0.1\" port = 2003 noart = false # Post v0.4.2 only [bgsave] enabled = true every = 120 # Every 120 seconds This is the default configuration used by Skybase when you don't specify a configuration file. Let's understand what each of the keys mean: server : host : This is the IP address to which you want the database server to bind to. It can be any valid IPv4 or IPv6 address, as a quoted string port : This is the port to which you want Skybase to bind to noart (OPTIONAL): This is an optional argument and is recommended for secure environments where displaying terminal artwork might cause problems bgsave (post v0.4.2 ): enabled : This is an optional key, which is to be set to true to enable BGSAVE or false to disable it. If this key is not specified, Skybase will enable BGSAVE by default every : Run BGSAVE every seconds. So, for example, if you set this to 120, BGSAVE will run every two minutes. This is also an optional key, and if you don't provide it, the default BGSAVE duration of 120 seconds is used snapshot (since v0.4.5 , OPTIONAL): This key can be used to configure snapshots and is not enabled by default. See this for more information. Using a configuration file \u00b6 To use a configuration file: Create it! We recommend you to name it as sdb.toml for easy identification Start the database server with: sdb -c /path/to/your/file.toml Done \ud83c\udf89 If you're confused about creating a configuration file, we always recommend you to download a sample file from this link . Do note that this file is bleeding-edge and as a result will have new keys as they're created upstream. That's all that's there for using configuration files!","title":"Configuration Files"},{"location":"04-Configuration/#configuration-files","text":"Since v0.4.1, Skybase supports custom configuration files to let users customize the functioning of Skybase. Arguably, Skybase has one of the simplest configuration files around. With v0.5.0, Skybase allows configuration via command line arguments .","title":"Configuration Files"},{"location":"04-Configuration/#an-example-configuration","text":"A configuration file is a TOML file, which looks like: [server] host = \"127.0.0.1\" port = 2003 noart = false # Post v0.4.2 only [bgsave] enabled = true every = 120 # Every 120 seconds This is the default configuration used by Skybase when you don't specify a configuration file. Let's understand what each of the keys mean: server : host : This is the IP address to which you want the database server to bind to. It can be any valid IPv4 or IPv6 address, as a quoted string port : This is the port to which you want Skybase to bind to noart (OPTIONAL): This is an optional argument and is recommended for secure environments where displaying terminal artwork might cause problems bgsave (post v0.4.2 ): enabled : This is an optional key, which is to be set to true to enable BGSAVE or false to disable it. If this key is not specified, Skybase will enable BGSAVE by default every : Run BGSAVE every seconds. So, for example, if you set this to 120, BGSAVE will run every two minutes. This is also an optional key, and if you don't provide it, the default BGSAVE duration of 120 seconds is used snapshot (since v0.4.5 , OPTIONAL): This key can be used to configure snapshots and is not enabled by default. See this for more information.","title":"An example configuration"},{"location":"04-Configuration/#using-a-configuration-file","text":"To use a configuration file: Create it! We recommend you to name it as sdb.toml for easy identification Start the database server with: sdb -c /path/to/your/file.toml Done \ud83c\udf89 If you're confused about creating a configuration file, we always recommend you to download a sample file from this link . Do note that this file is bleeding-edge and as a result will have new keys as they're created upstream. That's all that's there for using configuration files!","title":"Using a configuration file"},{"location":"05-Persistence/","text":"Persistence \u00b6 Since 0.3.0 \u2014 Skybase supports the persistent storage of data, which is an inherently obvious need for any database. In this document we explore how Skybase's persistence works. How Skybase stores data \u00b6 Whenever you start the database, Skybase looks for a data.bin file, which contains data from the previous run of the database server. This is a binary file and should not be edited by hand: as you might end up corrupting the file. When you shut down the database, Skybase stops stops listening to all incoming connections, and then flushes the entire in-memory table onto disk and then shutting down. Automated background saving \u00b6 Since 0.4.2, Skybase supports automated saving of data in the background, via BGSAVE . BGSAVE , runs every two minutes to flush all the data in the in-memory table onto disk, unless customized through the configuration file .","title":"Persistence"},{"location":"05-Persistence/#persistence","text":"Since 0.3.0 \u2014 Skybase supports the persistent storage of data, which is an inherently obvious need for any database. In this document we explore how Skybase's persistence works.","title":"Persistence"},{"location":"05-Persistence/#how-skybase-stores-data","text":"Whenever you start the database, Skybase looks for a data.bin file, which contains data from the previous run of the database server. This is a binary file and should not be edited by hand: as you might end up corrupting the file. When you shut down the database, Skybase stops stops listening to all incoming connections, and then flushes the entire in-memory table onto disk and then shutting down.","title":"How Skybase stores data"},{"location":"05-Persistence/#automated-background-saving","text":"Since 0.4.2, Skybase supports automated saving of data in the background, via BGSAVE . BGSAVE , runs every two minutes to flush all the data in the in-memory table onto disk, unless customized through the configuration file .","title":"Automated background saving"},{"location":"06-snapshots/","text":"Snapshots \u00b6 Since v0.4.5, Skybase supports automated snapshots that can be used for periodic backups. Skybase's snapshotting system is dead simple and works in a similar way to BGSAVE . Enabling snapshots \u00b6 Snapshots aren't enabled by default - you have to enable them by using the configuration file or command line arguments . To your existing configuration file, just add the following block: [snapshot] enabled = true every = 3600 atmost = 4 Here's what these values mean: enabled - Whether snapshotting is enabled or not; either true or false every - Number of seconds to wait before creating another snapshot atmost - The maximum number of snapshots to keep Storage of snapshots \u00b6 All the created snapshots are stored in a snapshots folder in the current directory. The snapshot files are named in the format: YYYYMMDD-HHMMSS.snapshot . How snapshots work \u00b6 As mentioned earlier, snapshots work just like BGSAVE . A task is spawned that acquires a lock on the core table and once all the data is successfully flushed to disk, the task exits and releases the lock. Methods of creating snapshots \u00b6 Snapshots can be created automatically by using the configuration file. However, if you want to create snapshots remotely, you can use the MKSNAP action. Do note that this requires snapshotting to be enabled before it can create snapshots.","title":"Snapshots"},{"location":"06-snapshots/#snapshots","text":"Since v0.4.5, Skybase supports automated snapshots that can be used for periodic backups. Skybase's snapshotting system is dead simple and works in a similar way to BGSAVE .","title":"Snapshots"},{"location":"06-snapshots/#enabling-snapshots","text":"Snapshots aren't enabled by default - you have to enable them by using the configuration file or command line arguments . To your existing configuration file, just add the following block: [snapshot] enabled = true every = 3600 atmost = 4 Here's what these values mean: enabled - Whether snapshotting is enabled or not; either true or false every - Number of seconds to wait before creating another snapshot atmost - The maximum number of snapshots to keep","title":"Enabling snapshots"},{"location":"06-snapshots/#storage-of-snapshots","text":"All the created snapshots are stored in a snapshots folder in the current directory. The snapshot files are named in the format: YYYYMMDD-HHMMSS.snapshot .","title":"Storage of snapshots"},{"location":"06-snapshots/#how-snapshots-work","text":"As mentioned earlier, snapshots work just like BGSAVE . A task is spawned that acquires a lock on the core table and once all the data is successfully flushed to disk, the task exits and releases the lock.","title":"How snapshots work"},{"location":"06-snapshots/#methods-of-creating-snapshots","text":"Snapshots can be created automatically by using the configuration file. However, if you want to create snapshots remotely, you can use the MKSNAP action. Do note that this requires snapshotting to be enabled before it can create snapshots.","title":"Methods of creating snapshots"},{"location":"07-benchmarking/","text":"Benchmarking \u00b6 Who doesn't like speed and as a consequence, benchmarks? So here's a guide on benchmarking Skybase with our tool sky-bench . Step 0: Getting the benchmarking tool \u00b6 The benchmark tool ( sky-bench ) has been shipped as a part of the Skybase bundle ever since 0.3.2. So, you'll need to download a bundle from the releases page and unzip it. In the following steps we'll assume that you have unzipped the archive and you're in that directory. Step 1: Starting the database server \u00b6 Open a terminal in the current directory and set executable permissions . Now start the server by running ./sdb (or just sdb on Windows). Step 2: Run the benchmark tool \u00b6 Open another terminal in the current directory and then run sky-bench with no arguments if you want to use the default options, or run sky-bench --help to see available configuration options. Hold tight, you'll know when it happens \ud83d\ude80. Bonus: JSON Output \u00b6 If you're a bit nerdy, we know it \u2014 you'll like some structured data. Well, all you need to do is: run sky-bench --json for JSON output!","title":"Benchmarking"},{"location":"07-benchmarking/#benchmarking","text":"Who doesn't like speed and as a consequence, benchmarks? So here's a guide on benchmarking Skybase with our tool sky-bench .","title":"Benchmarking"},{"location":"07-benchmarking/#step-0-getting-the-benchmarking-tool","text":"The benchmark tool ( sky-bench ) has been shipped as a part of the Skybase bundle ever since 0.3.2. So, you'll need to download a bundle from the releases page and unzip it. In the following steps we'll assume that you have unzipped the archive and you're in that directory.","title":"Step 0: Getting the benchmarking tool"},{"location":"07-benchmarking/#step-1-starting-the-database-server","text":"Open a terminal in the current directory and set executable permissions . Now start the server by running ./sdb (or just sdb on Windows).","title":"Step 1: Starting the database server"},{"location":"07-benchmarking/#step-2-run-the-benchmark-tool","text":"Open another terminal in the current directory and then run sky-bench with no arguments if you want to use the default options, or run sky-bench --help to see available configuration options. Hold tight, you'll know when it happens \ud83d\ude80.","title":"Step 2: Run the benchmark tool"},{"location":"07-benchmarking/#bonus-json-output","text":"If you're a bit nerdy, we know it \u2014 you'll like some structured data. Well, all you need to do is: run sky-bench --json for JSON output!","title":"Bonus: JSON Output"},{"location":"Response-Codes/","text":"Response Codes \u00b6 Skybase may return any of the response codes listed here: Code Description Notes 0 Okay 1 Nil 2 Overwrite Error 3 Action Error The action didn't expect the arguments sent 4 Packet Error The packet contains invalid data 5 Server Error An error occurred on the server side 6 Other error Some other error response Error String Other error with description Some other error occurred and the server returned a description of this error. See this document","title":"Response Codes"},{"location":"Response-Codes/#response-codes","text":"Skybase may return any of the response codes listed here: Code Description Notes 0 Okay 1 Nil 2 Overwrite Error 3 Action Error The action didn't expect the arguments sent 4 Packet Error The packet contains invalid data 5 Server Error An error occurred on the server side 6 Other error Some other error response Error String Other error with description Some other error occurred and the server returned a description of this error. See this document","title":"Response Codes"},{"location":"Supported-Data-Types/","text":"Data Types \u00b6 This table lists all data types supported by Skybase and their corresponding type symbols ( tsymbol s) and additional information. Type symbol (tsymbol) Type Additional notes + String The next line is a string ! Response Code The next line is a response code $ JSON The next line is a `JSON` value - smallint An integer in the range: [0, 255] _ smallint signed An integer in the range: [-128, 127] : int An integer in the range: [0, 4,294,967,295] ; int signed An integer in the range: [-2,147,483,647, 2,147,483,647] % float A 32-bit floating point value ? binary The next line contains binary data (often called a blob) Do keep the matching for this symbol non-exhaustive since we might add more types in future revisions of the protocol.","title":"Data Types"},{"location":"Supported-Data-Types/#data-types","text":"This table lists all data types supported by Skybase and their corresponding type symbols ( tsymbol s) and additional information. Type symbol (tsymbol) Type Additional notes + String The next line is a string ! Response Code The next line is a response code $ JSON The next line is a `JSON` value - smallint An integer in the range: [0, 255] _ smallint signed An integer in the range: [-128, 127] : int An integer in the range: [0, 4,294,967,295] ; int signed An integer in the range: [-2,147,483,647, 2,147,483,647] % float A 32-bit floating point value ? binary The next line contains binary data (often called a blob) Do keep the matching for this symbol non-exhaustive since we might add more types in future revisions of the protocol.","title":"Data Types"},{"location":"errors/","text":"Error strings \u00b6 In certain situations, the server may return error strings (also known as other errors), instead of the standard response codes. Table of errors \u00b6 Error String Meaning err-access-after-termsig This error indicates that a connection was accepted by the server even after the database received a termination signal. This is a very bad error and should be reported immediately err-snapshot-busy This indicates that a snapshot operation is already in progress err-snapshot-disabled This indicates that snapshots have been disabled on the server-side","title":"Error strings"},{"location":"errors/#error-strings","text":"In certain situations, the server may return error strings (also known as other errors), instead of the standard response codes.","title":"Error strings"},{"location":"errors/#table-of-errors","text":"Error String Meaning err-access-after-termsig This error indicates that a connection was accepted by the server even after the database received a termination signal. This is a very bad error and should be reported immediately err-snapshot-busy This indicates that a snapshot operation is already in progress err-snapshot-disabled This indicates that snapshots have been disabled on the server-side","title":"Table of errors"},{"location":"from-terrabasedb/","text":"As of v0.5.0, which is currently the latest release \u2014 the binaries released are still under the 'TerrabaseDB' name. In that event, please visit the archived docs for TerrabaseDB here where you can find TDB's documentation. Once we push a new release, you shouldn't have trouble using this documentation site! If you want to use this new site, all you need to do is replace 'sdb' with 'tdb', 'skysh' with 'tsh' and 'sky-bench' with 'tdb-bench'; yeah \u2014 not much has changed! If you're running your own build off next , you're ready to roll!","title":"Migrating from TerrabaseDB"},{"location":"Actions/DBSIZE/","text":"DBSIZE \u00b6 Since : 0.4.3 Time complexity : O(1) Arguments : DBSIZE Returns : Number of keys that exist in the database as an unsigned int Number of key/value pairs stored in the database","title":"DBSIZE"},{"location":"Actions/DBSIZE/#dbsize","text":"Since : 0.4.3 Time complexity : O(1) Arguments : DBSIZE Returns : Number of keys that exist in the database as an unsigned int Number of key/value pairs stored in the database","title":"DBSIZE"},{"location":"Actions/DEL/","text":"DEL \u00b6 Since : 0.1.0 Time complexity : O(n) Arguments : DEL <key1> <key2> ... Returns : Number of keys that were deleted as an unsigned int Delete 'n' keys","title":"DEL"},{"location":"Actions/DEL/#del","text":"Since : 0.1.0 Time complexity : O(n) Arguments : DEL <key1> <key2> ... Returns : Number of keys that were deleted as an unsigned int Delete 'n' keys","title":"DEL"},{"location":"Actions/EXISTS/","text":"EXISTS \u00b6 Since : 0.4.0 Time complexity : O(n) Arguments : EXISTS <key1> <key2> ... Returns : Number of keys that exist as an unsigned int Check if 'n' keys exist","title":"EXISTS"},{"location":"Actions/EXISTS/#exists","text":"Since : 0.4.0 Time complexity : O(n) Arguments : EXISTS <key1> <key2> ... Returns : Number of keys that exist as an unsigned int Check if 'n' keys exist","title":"EXISTS"},{"location":"Actions/FLUSHDB/","text":"FLUSHDB \u00b6 Since : 0.4.3 Time complexity : O(n) Arguments : FLUSHDB Returns : (Code: 0) if the operation succeeded Removes all the key/value pairs stored in the database","title":"FLUSHDB"},{"location":"Actions/FLUSHDB/#flushdb","text":"Since : 0.4.3 Time complexity : O(n) Arguments : FLUSHDB Returns : (Code: 0) if the operation succeeded Removes all the key/value pairs stored in the database","title":"FLUSHDB"},{"location":"Actions/GET/","text":"GET \u00b6 Since : 0.1.0 Time complexity : O(1) Arguments : GET <key> Returns : Value if it exists or (Code: 1) if it does not Get the value of a key","title":"GET"},{"location":"Actions/GET/#get","text":"Since : 0.1.0 Time complexity : O(1) Arguments : GET <key> Returns : Value if it exists or (Code: 1) if it does not Get the value of a key","title":"GET"},{"location":"Actions/KEYLEN/","text":"KEYLEN \u00b6 Since : 0.4.4 Time complexity : O(1) Arguments : KEYLEN <key> Returns : Length of the key as an unsigned int Returns the length of the UTF-8 string","title":"KEYLEN"},{"location":"Actions/KEYLEN/#keylen","text":"Since : 0.4.4 Time complexity : O(1) Arguments : KEYLEN <key> Returns : Length of the key as an unsigned int Returns the length of the UTF-8 string","title":"KEYLEN"},{"location":"Actions/MGET/","text":"MGET \u00b6 Since : 0.4.0 Time complexity : O(n) Arguments : MGET <key1> <key2> ... Returns : Value if it exists or (Code: 1) if it does not Get the value of 'n' keys","title":"MGET"},{"location":"Actions/MGET/#mget","text":"Since : 0.4.0 Time complexity : O(n) Arguments : MGET <key1> <key2> ... Returns : Value if it exists or (Code: 1) if it does not Get the value of 'n' keys","title":"MGET"},{"location":"Actions/MKSNAP/","text":"MKSNAP \u00b6 Since : 0.4.6 Time complexity : O(n) Arguments : MKSNAP <SNAPNAME> Returns : Okay if succeeded, otherwise it returns err-snapshot-disabled if snapshotting is disabled or err-snapshot-busy if a snapshotting operation is already in progress This action can be used to create a snapshot. Do note that this action requires snapshotting to be enabled on the server side , before it can create snapshots. If you want to create snapshots without snapshots being enabled on the server-side, use a second argument ( [SNAPNAME] ) to specify a snapshot name and a snapshot will be create in a folder called remote under your snapshots directory. For more information on snapshots, read this document","title":"MKSNAP"},{"location":"Actions/MKSNAP/#mksnap","text":"Since : 0.4.6 Time complexity : O(n) Arguments : MKSNAP <SNAPNAME> Returns : Okay if succeeded, otherwise it returns err-snapshot-disabled if snapshotting is disabled or err-snapshot-busy if a snapshotting operation is already in progress This action can be used to create a snapshot. Do note that this action requires snapshotting to be enabled on the server side , before it can create snapshots. If you want to create snapshots without snapshots being enabled on the server-side, use a second argument ( [SNAPNAME] ) to specify a snapshot name and a snapshot will be create in a folder called remote under your snapshots directory. For more information on snapshots, read this document","title":"MKSNAP"},{"location":"Actions/MSET/","text":"MSET \u00b6 Since : 0.4.0 Time complexity : O(n) Arguments : MSET <key1> <value1> <key2> <value2> ... Returns : Number of keys that were set as an unsigned int Set the value of 'n' keys","title":"MSET"},{"location":"Actions/MSET/#mset","text":"Since : 0.4.0 Time complexity : O(n) Arguments : MSET <key1> <value1> <key2> <value2> ... Returns : Number of keys that were set as an unsigned int Set the value of 'n' keys","title":"MSET"},{"location":"Actions/MUPDATE/","text":"MUPDATE \u00b6 Since : 0.4.0 Time complexity : O(n) Arguments : UPDATE <key1> <value1> <key2> <value2> ... Returns : Number of keys that were updated as an unsigned int Update the value of 'n' keys","title":"MUPDATE"},{"location":"Actions/MUPDATE/#mupdate","text":"Since : 0.4.0 Time complexity : O(n) Arguments : UPDATE <key1> <value1> <key2> <value2> ... Returns : Number of keys that were updated as an unsigned int Update the value of 'n' keys","title":"MUPDATE"},{"location":"Actions/SDEL/","text":"SDEL \u00b6 Since : 0.4.3 Time complexity : O(n) Arguments : SDEL <key1> <key2> ... Returns : (Code: 0) if all keys were deleted, otherwise (Code: 1) Delete all keys if all of the keys exist","title":"SDEL"},{"location":"Actions/SDEL/#sdel","text":"Since : 0.4.3 Time complexity : O(n) Arguments : SDEL <key1> <key2> ... Returns : (Code: 0) if all keys were deleted, otherwise (Code: 1) Delete all keys if all of the keys exist","title":"SDEL"},{"location":"Actions/SET/","text":"SET \u00b6 Since : 0.1.0 Time complexity : O(1) Arguments : SET <key> <value> Returns : (Code: 0) if succeeded or (Code: 2) if not Set the value of a key","title":"SET"},{"location":"Actions/SET/#set","text":"Since : 0.1.0 Time complexity : O(1) Arguments : SET <key> <value> Returns : (Code: 0) if succeeded or (Code: 2) if not Set the value of a key","title":"SET"},{"location":"Actions/SSET/","text":"SSET \u00b6 Since : 0.4.3 Time complexity : O(n) Arguments : SSET <key1> <value1> <key2> <value2> ... Returns : (Code: 0) if all keys were set, otherwise (Code: 2) Set all keys to the given values only if all of them don't exist","title":"SSET"},{"location":"Actions/SSET/#sset","text":"Since : 0.4.3 Time complexity : O(n) Arguments : SSET <key1> <value1> <key2> <value2> ... Returns : (Code: 0) if all keys were set, otherwise (Code: 2) Set all keys to the given values only if all of them don't exist","title":"SSET"},{"location":"Actions/SUPDATE/","text":"SUPDATE \u00b6 Since : 0.4.3 Time complexity : O(n) Arguments : SUPDATE <key1> <value1> <key2> <value2> ... Returns : (Code: 0) if all keys were updated, otherwise (Code: 1) Update all keys if all of the keys exist","title":"SUPDATE"},{"location":"Actions/SUPDATE/#supdate","text":"Since : 0.4.3 Time complexity : O(n) Arguments : SUPDATE <key1> <value1> <key2> <value2> ... Returns : (Code: 0) if all keys were updated, otherwise (Code: 1) Update all keys if all of the keys exist","title":"SUPDATE"},{"location":"Actions/UPDATE/","text":"UPDATE \u00b6 Since : 0.1.0 Time complexity : O(1) Arguments : UPDATE <key> <value> Returns : (Code: 0) if succeeded or (Code: 1) if not Update the value of an existing key","title":"UPDATE"},{"location":"Actions/UPDATE/#update","text":"Since : 0.1.0 Time complexity : O(1) Arguments : UPDATE <key> <value> Returns : (Code: 0) if succeeded or (Code: 1) if not Update the value of an existing key","title":"UPDATE"},{"location":"Actions/USET/","text":"USET \u00b6 Since : 0.4.4 Time complexity : O(n) Arguments : USET <key1> <value1> <key2> <value2> ... Returns : Number of keys that were USET ed, as an unsigned int SET all keys if they don't exist, or UPDATE them if they do exist","title":"USET"},{"location":"Actions/USET/#uset","text":"Since : 0.4.4 Time complexity : O(n) Arguments : USET <key1> <value1> <key2> <value2> ... Returns : Number of keys that were USET ed, as an unsigned int SET all keys if they don't exist, or UPDATE them if they do exist","title":"USET"},{"location":"Protocols/terrapipe/","text":"Terrapipe 1.0 \u00b6 Copyright (c) 2020 Sayan < ohsayan@outlook.com > Date: Aug 23, 2020 In effect since: v0.4.0 Introduction \u00b6 Terrapipe is an application layer protocol, like HTTP, built on top of TCP which is used by Skybase for client/server communication. All clients willing to communicate with Skybase servers must implement this protocol. This document serves as a guide for implementing clients for Skybase. Concepts \u00b6 Terrapipe also works in a request/response action like HTTP, except that we call it a query/response action. A client sends a query, and the server returns a response. The bytes sent by a client is called a query packet, while the bytes sent by the server in response to this is called a response packet. Each packet (irrespective of query or response), contains two parts: The metaframe : the first two lines The dataframe : the remaining lines Types of queries \u00b6 Simple queries : These queries just perform one action (like GET , SET , ...) Batch queries : These queries perform multiple actions Datagroups \u00b6 A datagroup is a collection of elements that perform one action, for a query or a collection elements that return the outcome for one action, for a response. Don't worry, read on and you'll understand what it is. The Metaframe \u00b6 The metaframe is made up of precisely two lines (separated by a LF or \\n byte). This is what it looks like: #<m>\\n *<n>\\n Here: <n> is the number of datagroups in the query. Since simple queries perform one action only, the value of <n> is always 1. Batch queries have values of n in the range (1, \u221e) <m> is the number of bytes in the following line excluding the \\n byte. So let's say we had *1\\n in the second line of the metaframe, then <m> would have a value of 2. Also make sure that you make matching the * character non-exhaustive, as we might be adding more packet types in the future which may need symbols other than * . The Dataframe \u00b6 The dataframe is made up of groups called datagroups as we had mentioned earlier. In the case of a query like GET x , GET x will be the query datagroup, and the response returned by the server with the key, will be the response datagroup (of course, excluding the metaframe). Every query datagroup will contain all the arguments required to execute that action, including the action itself. Each datagroup has two lines of boilerplate in the beginning. This looks like: #<p>\\n &<q>\\n Here: <q> is the number of arguments/elements in the datagroup and <p> is the number of bytes in the next line, excluding the \\n byte (just like the metaframe) An entire datagroup, has the following structure: #<p>\\n &<q>\\n <--- DATA ---> We know the first two lines...but wait, what is <--- DATA ---> ? Let's take a look at what is data looks like in the case of queries and then we'll look at what the data looks like in the case of responses. Data in Queries \u00b6 For a request like GET foo , the corresponding data will look like: #3 GET\\n #3\\n foo\\n So, starting from line 1: we have a '#' followed by the number of bytes in the next line (3 in this case), excluding the \\n byte. We then have a \\n byte. Looking ahead, we have 3 bytes ( GET ) followed by a \\n byte. We then have a '#' followed by the number of bytes in the next line (3 again, in this case), followed by a \\n byte. And this goes on The idea is, we have a # followed by the number of bytes (let it be n ) to be read from the next line and a line feed character ('\\n'). In the next line, we read n bytes and skip the line feed character. And we keep going on, in this way. Not so hard, right? Now let's look at what the data looks like in the case of responses. Data in Responses \u00b6 Data in responses have the following general structure: <tsymbol><length>\\n <item>\\n <tsymbol><length>\\n ... and so on Here, we can easily make out that <length> is the number of bytes in the following line (just like a query) and <item> is well, an argument/element in the datagroup. But then, what is <tsymbol> ? Simply put, it is the type of data in the following line. But, before you go ahead, here's the simple flow that you must keep in mind: Read the tsymbol and match it against the data type Parse the data in the next line into the data type Repeat for the remaining lines So, to conclude, <tsymbol> specifies the type of the item in the following line. Read on to know what values <tsymbol> can assume. Data Types \u00b6 You can find a full list of data types and their <tsymbol> s here . Response codes \u00b6 You can find a full list of response codes and their descriptions here And that's about it! For a list of actions, see this .","title":"Terrapipe 1.0"},{"location":"Protocols/terrapipe/#terrapipe-10","text":"Copyright (c) 2020 Sayan < ohsayan@outlook.com > Date: Aug 23, 2020 In effect since: v0.4.0","title":"Terrapipe 1.0"},{"location":"Protocols/terrapipe/#introduction","text":"Terrapipe is an application layer protocol, like HTTP, built on top of TCP which is used by Skybase for client/server communication. All clients willing to communicate with Skybase servers must implement this protocol. This document serves as a guide for implementing clients for Skybase.","title":"Introduction"},{"location":"Protocols/terrapipe/#concepts","text":"Terrapipe also works in a request/response action like HTTP, except that we call it a query/response action. A client sends a query, and the server returns a response. The bytes sent by a client is called a query packet, while the bytes sent by the server in response to this is called a response packet. Each packet (irrespective of query or response), contains two parts: The metaframe : the first two lines The dataframe : the remaining lines","title":"Concepts"},{"location":"Protocols/terrapipe/#types-of-queries","text":"Simple queries : These queries just perform one action (like GET , SET , ...) Batch queries : These queries perform multiple actions","title":"Types of queries"},{"location":"Protocols/terrapipe/#datagroups","text":"A datagroup is a collection of elements that perform one action, for a query or a collection elements that return the outcome for one action, for a response. Don't worry, read on and you'll understand what it is.","title":"Datagroups"},{"location":"Protocols/terrapipe/#the-metaframe","text":"The metaframe is made up of precisely two lines (separated by a LF or \\n byte). This is what it looks like: #<m>\\n *<n>\\n Here: <n> is the number of datagroups in the query. Since simple queries perform one action only, the value of <n> is always 1. Batch queries have values of n in the range (1, \u221e) <m> is the number of bytes in the following line excluding the \\n byte. So let's say we had *1\\n in the second line of the metaframe, then <m> would have a value of 2. Also make sure that you make matching the * character non-exhaustive, as we might be adding more packet types in the future which may need symbols other than * .","title":"The Metaframe"},{"location":"Protocols/terrapipe/#the-dataframe","text":"The dataframe is made up of groups called datagroups as we had mentioned earlier. In the case of a query like GET x , GET x will be the query datagroup, and the response returned by the server with the key, will be the response datagroup (of course, excluding the metaframe). Every query datagroup will contain all the arguments required to execute that action, including the action itself. Each datagroup has two lines of boilerplate in the beginning. This looks like: #<p>\\n &<q>\\n Here: <q> is the number of arguments/elements in the datagroup and <p> is the number of bytes in the next line, excluding the \\n byte (just like the metaframe) An entire datagroup, has the following structure: #<p>\\n &<q>\\n <--- DATA ---> We know the first two lines...but wait, what is <--- DATA ---> ? Let's take a look at what is data looks like in the case of queries and then we'll look at what the data looks like in the case of responses.","title":"The Dataframe"},{"location":"Protocols/terrapipe/#data-in-queries","text":"For a request like GET foo , the corresponding data will look like: #3 GET\\n #3\\n foo\\n So, starting from line 1: we have a '#' followed by the number of bytes in the next line (3 in this case), excluding the \\n byte. We then have a \\n byte. Looking ahead, we have 3 bytes ( GET ) followed by a \\n byte. We then have a '#' followed by the number of bytes in the next line (3 again, in this case), followed by a \\n byte. And this goes on The idea is, we have a # followed by the number of bytes (let it be n ) to be read from the next line and a line feed character ('\\n'). In the next line, we read n bytes and skip the line feed character. And we keep going on, in this way. Not so hard, right? Now let's look at what the data looks like in the case of responses.","title":"Data in Queries"},{"location":"Protocols/terrapipe/#data-in-responses","text":"Data in responses have the following general structure: <tsymbol><length>\\n <item>\\n <tsymbol><length>\\n ... and so on Here, we can easily make out that <length> is the number of bytes in the following line (just like a query) and <item> is well, an argument/element in the datagroup. But then, what is <tsymbol> ? Simply put, it is the type of data in the following line. But, before you go ahead, here's the simple flow that you must keep in mind: Read the tsymbol and match it against the data type Parse the data in the next line into the data type Repeat for the remaining lines So, to conclude, <tsymbol> specifies the type of the item in the following line. Read on to know what values <tsymbol> can assume.","title":"Data in Responses"},{"location":"Protocols/terrapipe/#data-types","text":"You can find a full list of data types and their <tsymbol> s here .","title":"Data Types"},{"location":"Protocols/terrapipe/#response-codes","text":"You can find a full list of response codes and their descriptions here And that's about it! For a list of actions, see this .","title":"Response codes"},{"location":"Protocols/unsupported-tp/","text":"Terrapipe 0.1 (Deprecated) \u00b6 Copyright (c) 2020 Sayan < ohsayan@outlook.com > Date: July 17, 2020 Updated: Aug 6, 2020 In effect since: v0.2.0 Deprecated since: v0.4.0 Introduction \u00b6 Terrapipe is an application layer protocol like HTTP, built on top of TCP. It is used by the Skybase for client-server communication. All clients willing to communicate with the Skybase must implement this protocol. This document serves as a guide to implement the protocol. Concepts \u00b6 Terrapipe works in a query/response action similar to HTTP's request/response action. Clients send queries and the bytes sent over the TCP stream is collectively called the query packet. The server responds with a response packet. Both these packets have two frames: Lines 1 and 2 (Metaframe): The first line (before the first LF) in any of these packets is called the metaline - this contains query/response metadata such as the action type and content length. The second line (before the second LF) is also a part of the metaframe, and it is called the metalayout Line 3 and the subsequent lines are collectively called the dataframe Each chunk of bytes following the metaframe is terminated with \\n i.e with LF Supported actions \u00b6 GET : A get query SET : A set query UPDATE : An update query DEL : A delete query HEYA : A status check query (The number of commands will continue to increase in the future) Response codes \u00b6 Code Description Notes 0 Okay 1 Not Found 2 Overwrite Error 3 Invalid Metaframe The metaframe has an illegal format 4 Incomplete The query packet is incomplete 5 Server Error An error occurred on the server side 6 Other error Some other error response. This error text would be sent in the dataframe Types of query/response packets \u00b6 Queries are of two kinds: Simple Query Packets - These queries will usually do just one thing. that is one action at a time Pipeline Query Packets - These queries are a combination of multiple individual queries Simple Query Packet \u00b6 Simple Query Metaframe (SQM) \u00b6 This is what a typical SQM looks like: <METALINE> <METALAYOUT> Line 1: Metaframe metaline \u00b6 The metaline has the following general structure: *!<CLENGTH>!<ML_LENGTH> Where: CLENGTH - This is the total content length excluding the metalayout line ML_LENGTH - This is the length of the metalayout line Example metaline \u00b6 *!22!12 Line 2: Metaframe metalayout \u00b6 The metalayout is kind of like the skip sequence which determines how many bytes are to be read from each partition preceding a \\n . The metalayout has the following general structure: #<l1_len>#<l2_len>#<l3_len>#<ln_len> The <l1_len> , <l2_len> and so on are the number of data bytes in each line in the dataframe, exclusive of the LF ('\\n') byte. Example metalayout \u00b6 For a dataframe which looks like: set\\nsayan\\n17 , the corresponding metalayout should be: #3#5#2 Line 3 (and subsequent lines): Dataframe \u00b6 The dataframe, well, contains data! It has the following general structure: set\\nsayan\\n17 Every piece of data is separated by \\n . Do note: this wouldn't cause any issues if a piece of data contains a newline byte as a part of it, since the metalayout defines the skip sequence. Please read the note on types Simple Response Packet \u00b6 Simple responses have the following general structure: *!<RESPCODE>!<CLENGTH>!<ML_LENGTH> <METALAYOUT> <DATAFRAME> Where: RESPOCDE - This can have any of the values listed here CLENGTH - This is the total content length excluding the metalayout line ML_LENGTH - This is the length of the metalayout line METALAYOUT - This has the same structure as the query packet's metalayout DATAFRAME - This has the same structure as the query packet's dataframe Pipeline Query Packet \u00b6 Pipeline queries are not very different from simple queries, except for the metaline in the metaframe. Pipeline query packets have the following general structure: $!<CLENGTH>!<ML_LENGTH> <METALAYOUT> <DATAFRAME> If you may have noticed, the only difference here, is that, instead of the asterisk (*), you have a Dollar Sign ($). All the other fields have the same meaning as in the simple query packet Pipeline Response Packet \u00b6 Again, pipeline responses are not much different from simple responses, except for having a Dollar Sign ($), in place of the asterisk (*) in the metaline, in the metaframe. It has the following general structure: $!<RESPCODE>!<CLENGTH>!<ML_LENGTH> <METALAYOUT> <DATAFRAME> Where the values in <> have their usual meanings. A note on types \u00b6 The server doesn't care much about types when queries are sent, but when pipelined queries are run, the server acts a little differently. This is because each query in a pipelined query will give different outcomes - some of them may return response codes, some of them may return arrays and some of them may return untyped things - since most responses are typically sent as strings, and it is the client's/user's responsibility to parse it into the required types. The server will respond in the following formats, for pipelined queries: Most values - +<value> is returned for most successful returns Response codes - !<respcode> is returned if the query returns a response code Arrays - the usual way Array responses \u00b6 Array responses are actually pretty simple! They look like: &<n>element1\\n element2\\n ... elementn\\n where <n> is the number of elements in the array. A complete example \u00b6 Simple Query/Response \u00b6 Here, we will assume that all operations are legal, that is while creating new keys, we will assume that the keys didn't exist, that is, there will be no Overwrite Error . This is the query I run on skysh : skysh> set sayan 17 skysh will send bytes like the following (excluding TCP's SYN/SYN ACK/ACK): *!13!7\\n#3#5#2\\nSET\\nsayan\\n17\\n The server does the action and writes the following back to the TCP stream: *!0!0!0 This is basically a success message, * since it is a simple response, 0 for RESPCODE , since the action was successful, 0 s for CLENGTH , and ML_LENGTH since no data is returned. Pipelined Query/Response \u00b6 Since we don't have any way to run a pipeline query from skysh (at the moment), we will assume that the pipeline query wants to do the following: SET sayan 17 GET foo HEYA Then, the client will send a query packet like: $!25!12\\n#3#5#2#3#3#4\\nSET\\nsayan\\n17\\nGET\\nfoo\\nHEYA Then, the server will respond like: $!15!6\\n#2#6#5\\n!0\\n+Hello\\n+HEY! Voila! We just saw terrapipe in action. Phew, we're done!","title":"Terrapipe 0.1 (Deprecated)"},{"location":"Protocols/unsupported-tp/#terrapipe-01-deprecated","text":"Copyright (c) 2020 Sayan < ohsayan@outlook.com > Date: July 17, 2020 Updated: Aug 6, 2020 In effect since: v0.2.0 Deprecated since: v0.4.0","title":"Terrapipe 0.1 (Deprecated)"},{"location":"Protocols/unsupported-tp/#introduction","text":"Terrapipe is an application layer protocol like HTTP, built on top of TCP. It is used by the Skybase for client-server communication. All clients willing to communicate with the Skybase must implement this protocol. This document serves as a guide to implement the protocol.","title":"Introduction"},{"location":"Protocols/unsupported-tp/#concepts","text":"Terrapipe works in a query/response action similar to HTTP's request/response action. Clients send queries and the bytes sent over the TCP stream is collectively called the query packet. The server responds with a response packet. Both these packets have two frames: Lines 1 and 2 (Metaframe): The first line (before the first LF) in any of these packets is called the metaline - this contains query/response metadata such as the action type and content length. The second line (before the second LF) is also a part of the metaframe, and it is called the metalayout Line 3 and the subsequent lines are collectively called the dataframe Each chunk of bytes following the metaframe is terminated with \\n i.e with LF","title":"Concepts"},{"location":"Protocols/unsupported-tp/#supported-actions","text":"GET : A get query SET : A set query UPDATE : An update query DEL : A delete query HEYA : A status check query (The number of commands will continue to increase in the future)","title":"Supported actions"},{"location":"Protocols/unsupported-tp/#response-codes","text":"Code Description Notes 0 Okay 1 Not Found 2 Overwrite Error 3 Invalid Metaframe The metaframe has an illegal format 4 Incomplete The query packet is incomplete 5 Server Error An error occurred on the server side 6 Other error Some other error response. This error text would be sent in the dataframe","title":"Response codes"},{"location":"Protocols/unsupported-tp/#types-of-queryresponse-packets","text":"Queries are of two kinds: Simple Query Packets - These queries will usually do just one thing. that is one action at a time Pipeline Query Packets - These queries are a combination of multiple individual queries","title":"Types of query/response packets"},{"location":"Protocols/unsupported-tp/#simple-query-packet","text":"","title":"Simple Query Packet"},{"location":"Protocols/unsupported-tp/#simple-query-metaframe-sqm","text":"This is what a typical SQM looks like: <METALINE> <METALAYOUT>","title":"Simple Query Metaframe (SQM)"},{"location":"Protocols/unsupported-tp/#line-1-metaframe-metaline","text":"The metaline has the following general structure: *!<CLENGTH>!<ML_LENGTH> Where: CLENGTH - This is the total content length excluding the metalayout line ML_LENGTH - This is the length of the metalayout line","title":"Line 1: Metaframe metaline"},{"location":"Protocols/unsupported-tp/#example-metaline","text":"*!22!12","title":"Example metaline"},{"location":"Protocols/unsupported-tp/#line-2-metaframe-metalayout","text":"The metalayout is kind of like the skip sequence which determines how many bytes are to be read from each partition preceding a \\n . The metalayout has the following general structure: #<l1_len>#<l2_len>#<l3_len>#<ln_len> The <l1_len> , <l2_len> and so on are the number of data bytes in each line in the dataframe, exclusive of the LF ('\\n') byte.","title":"Line 2: Metaframe metalayout"},{"location":"Protocols/unsupported-tp/#example-metalayout","text":"For a dataframe which looks like: set\\nsayan\\n17 , the corresponding metalayout should be: #3#5#2","title":"Example metalayout"},{"location":"Protocols/unsupported-tp/#line-3-and-subsequent-lines-dataframe","text":"The dataframe, well, contains data! It has the following general structure: set\\nsayan\\n17 Every piece of data is separated by \\n . Do note: this wouldn't cause any issues if a piece of data contains a newline byte as a part of it, since the metalayout defines the skip sequence. Please read the note on types","title":"Line 3 (and subsequent lines): Dataframe"},{"location":"Protocols/unsupported-tp/#simple-response-packet","text":"Simple responses have the following general structure: *!<RESPCODE>!<CLENGTH>!<ML_LENGTH> <METALAYOUT> <DATAFRAME> Where: RESPOCDE - This can have any of the values listed here CLENGTH - This is the total content length excluding the metalayout line ML_LENGTH - This is the length of the metalayout line METALAYOUT - This has the same structure as the query packet's metalayout DATAFRAME - This has the same structure as the query packet's dataframe","title":"Simple Response Packet"},{"location":"Protocols/unsupported-tp/#pipeline-query-packet","text":"Pipeline queries are not very different from simple queries, except for the metaline in the metaframe. Pipeline query packets have the following general structure: $!<CLENGTH>!<ML_LENGTH> <METALAYOUT> <DATAFRAME> If you may have noticed, the only difference here, is that, instead of the asterisk (*), you have a Dollar Sign ($). All the other fields have the same meaning as in the simple query packet","title":"Pipeline Query Packet"},{"location":"Protocols/unsupported-tp/#pipeline-response-packet","text":"Again, pipeline responses are not much different from simple responses, except for having a Dollar Sign ($), in place of the asterisk (*) in the metaline, in the metaframe. It has the following general structure: $!<RESPCODE>!<CLENGTH>!<ML_LENGTH> <METALAYOUT> <DATAFRAME> Where the values in <> have their usual meanings.","title":"Pipeline Response Packet"},{"location":"Protocols/unsupported-tp/#a-note-on-types","text":"The server doesn't care much about types when queries are sent, but when pipelined queries are run, the server acts a little differently. This is because each query in a pipelined query will give different outcomes - some of them may return response codes, some of them may return arrays and some of them may return untyped things - since most responses are typically sent as strings, and it is the client's/user's responsibility to parse it into the required types. The server will respond in the following formats, for pipelined queries: Most values - +<value> is returned for most successful returns Response codes - !<respcode> is returned if the query returns a response code Arrays - the usual way","title":"A note on types"},{"location":"Protocols/unsupported-tp/#array-responses","text":"Array responses are actually pretty simple! They look like: &<n>element1\\n element2\\n ... elementn\\n where <n> is the number of elements in the array.","title":"Array responses"},{"location":"Protocols/unsupported-tp/#a-complete-example","text":"","title":"A complete example"},{"location":"Protocols/unsupported-tp/#simple-queryresponse","text":"Here, we will assume that all operations are legal, that is while creating new keys, we will assume that the keys didn't exist, that is, there will be no Overwrite Error . This is the query I run on skysh : skysh> set sayan 17 skysh will send bytes like the following (excluding TCP's SYN/SYN ACK/ACK): *!13!7\\n#3#5#2\\nSET\\nsayan\\n17\\n The server does the action and writes the following back to the TCP stream: *!0!0!0 This is basically a success message, * since it is a simple response, 0 for RESPCODE , since the action was successful, 0 s for CLENGTH , and ML_LENGTH since no data is returned.","title":"Simple Query/Response"},{"location":"Protocols/unsupported-tp/#pipelined-queryresponse","text":"Since we don't have any way to run a pipeline query from skysh (at the moment), we will assume that the pipeline query wants to do the following: SET sayan 17 GET foo HEYA Then, the client will send a query packet like: $!25!12\\n#3#5#2#3#3#4\\nSET\\nsayan\\n17\\nGET\\nfoo\\nHEYA Then, the server will respond like: $!15!6\\n#2#6#5\\n!0\\n+Hello\\n+HEY! Voila! We just saw terrapipe in action. Phew, we're done!","title":"Pipelined Query/Response"}]}